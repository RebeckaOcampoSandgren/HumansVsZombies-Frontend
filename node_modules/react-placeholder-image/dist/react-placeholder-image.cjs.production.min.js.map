{"version":3,"file":"react-placeholder-image.cjs.production.min.js","sources":["../src/util.ts","../src/components/CustomPlaceholder.tsx","../src/components/PhotoPlaceholder.ts"],"sourcesContent":["/**\n * Removes any properties that undefined\n * @param obj - any object\n */\nexport function removeUndefined(obj: { [key: string]: any }) {\n  return Object.entries(obj).reduce<{ [key: string]: any }>(\n    (acc, [key, value]) => {\n      if (value !== undefined) {\n        acc[key] = value;\n      }\n\n      return acc;\n    },\n    {}\n  );\n}\n\n/**\n * An id that can be appended to a URL in order to identify a particular image within a browser cache\n *\n * Many random-image-generating services will return different images for the same URL,\n * but the browser will cache the result for the first request and will serve the cached response for subsequent requests\n * which means that all requests will effectively return the _same_ image every time.\n * So, we circumvent the browser's caching by appending a unique id to each request which ensures a cache-miss\n */\nexport function generateCacheId() {\n  return (Math.random() * 100000).toFixed(0);\n}\n","import * as React from 'react';\nimport url from 'url';\nimport { removeUndefined } from '../util';\n\n/**\n * Checks whether the input string is valid hex and then removes the hash\n * @param {string} hex\n */\nfunction sanitizeHex(hex: string) {\n  if (!/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(hex)) {\n    throw new Error(`Expected valid hex color, got \"${hex}\"`);\n  }\n\n  return hex.substring(1); // remove the hash\n}\n\n/**\n * Generates a URL for a custom placeholder image\n *\n * @param {number} width\n * @param {number} height\n * @param {object} [options]\n * @param {string} [options.backgroundColor={a light gray}]\n * @param {string} [options.text={the size of the image e.g. \"200x100\"}]\n * @param {string} [options.textColor={auto-contrast with backgroundColor}]\n */\nexport function generateCustomPlaceholderURL(\n  width: number,\n  height: number,\n  options: {\n    backgroundColor?: string;\n    textColor?: string;\n    text?: string;\n  } = {}\n) {\n  const { backgroundColor, textColor, text } = options;\n\n  return url.format({\n    protocol: 'https',\n    host: 'via.placeholder.com',\n    pathname: [\n      `${width}x${height}`,\n      backgroundColor ? sanitizeHex(backgroundColor) : '',\n      textColor ? sanitizeHex(textColor) : undefined,\n    ]\n      .filter(part => part !== undefined)\n      .join('/'),\n    query: removeUndefined({\n      text,\n    }),\n  });\n}\n\nexport const CustomPlaceholder = (\n  props: JSX.IntrinsicElements['img'] & {\n    width: number;\n    height: number;\n    backgroundColor?: string;\n    textColor?: string;\n    text?: string;\n  }\n): React.DetailedReactHTMLElement<\n  React.ImgHTMLAttributes<HTMLImageElement>,\n  HTMLImageElement\n> => {\n  const {\n    width,\n    height,\n    backgroundColor,\n    textColor,\n    text,\n    src,\n    ...htmlProps\n  } = props;\n\n  if (src !== undefined) {\n    console.warn(\n      'Do not define the `src` prop for <CustomPlaceholder />; the src will be generated'\n    );\n  }\n\n  return React.createElement('img', {\n    src: generateCustomPlaceholderURL(width, height, {\n      backgroundColor,\n      textColor,\n      text,\n    }),\n    alt: 'placeholder',\n    ...htmlProps,\n  });\n};\n","import * as React from 'react';\nimport url from 'url';\nimport { removeUndefined, generateCacheId } from '../util';\n\n/**\n * Generates a URL for a random placeholder photo\n *\n * @param {number} width\n * @param {number} height\n * @param {object} [options]\n * @param {string} [options.grayscale={boolean}]\n */\nexport function generatePhotoPlaceholderURL(\n  width: number,\n  height: number,\n  options: {\n    grayscale?: boolean;\n  } = {}\n) {\n  const { grayscale = false } = options;\n\n  return url.format({\n    protocol: 'https',\n    host: 'picsum.photos',\n    pathname: `/${width}/${height}`,\n    query: removeUndefined({\n      // if grayscale query param is present, the image will be grayscale, even if it is grayscale=false or grayscale=<nothing>\n      // so we completely omit the key if grayscale is not true\n      grayscale: grayscale ? grayscale : undefined,\n      // automatically cache-bust the url so that same-size images on the page don't get the same image\n      cacheId: generateCacheId(),\n    }),\n  });\n}\n\nexport const PhotoPlaceholder = (\n  props: JSX.IntrinsicElements['img'] & {\n    width: number;\n    height: number;\n    grayscale?: boolean;\n  }\n): React.DetailedReactHTMLElement<\n  React.ImgHTMLAttributes<HTMLImageElement>,\n  HTMLImageElement\n> => {\n  const { width, height, grayscale, src, ...htmlProps } = props;\n\n  if (src !== undefined) {\n    console.warn(\n      'Do not define the `src` prop for <PhotoPlaceholder />; the src will be generated'\n    );\n  }\n\n  const [url, setURL] = React.useState<string | undefined>(undefined);\n\n  // generating the URL is side-effectful because it generates a new random cache-busting query param\n  // we use layout effect so that the url is calculated before the element is flushed to the DOM\n  React.useLayoutEffect(() => {\n    setURL(\n      generatePhotoPlaceholderURL(width, height, {\n        grayscale,\n      })\n    );\n  }, [width, height, grayscale]);\n\n  return React.createElement('img', {\n    src: url,\n    alt: 'Placeholder',\n    ...htmlProps,\n  });\n};\n"],"names":["removeUndefined","obj","Object","entries","reduce","acc","value","undefined","sanitizeHex","hex","test","Error","substring","generateCustomPlaceholderURL","width","height","options","backgroundColor","textColor","text","url","format","protocol","host","pathname","filter","part","join","query","generatePhotoPlaceholderURL","grayscale","cacheId","Math","random","toFixed","props","src","htmlProps","console","warn","React","alt","setURL"],"mappings":"scAIgBA,EAAgBC,UACvBC,OAAOC,QAAQF,GAAKG,OACzB,SAACC,SAAWC,mBACIC,IAAVD,IACFD,QAAWC,GAGND,GAET,ICLJ,SAASG,EAAYC,OACd,qCAAqCC,KAAKD,SACvC,IAAIE,wCAAwCF,cAG7CA,EAAIG,UAAU,GAavB,SAAgBC,EACdC,EACAC,EACAC,YAAAA,IAAAA,EAII,QAEIC,EAAqCD,EAArCC,gBAAiBC,EAAoBF,EAApBE,UAAWC,EAASH,EAATG,YAE7BC,EAAIC,OAAO,CAChBC,SAAU,QACVC,KAAM,sBACNC,SAAU,CACLV,MAASC,EACZE,EAAkBT,EAAYS,GAAmB,GACjDC,EAAYV,EAAYU,QAAaX,GAEpCkB,OAAO,SAAAC,eAAiBnB,IAATmB,IACfC,KAAK,KACRC,MAAO5B,EAAgB,CACrBmB,KAAAA,MCpCN,SAAgBU,EACdf,EACAC,EACAC,YAAAA,IAAAA,EAEI,UAE0BA,EAAtBc,iBAEDV,EAAIC,OAAO,CAChBC,SAAU,QACVC,KAAM,gBACNC,aAAcV,MAASC,EACvBa,MAAO5B,EAAgB,CAGrB8B,8BAAmCvB,EAEnCwB,SFJoB,IAAhBC,KAAKC,UAAmBC,QAAQ,iCC2BT,SAC/BC,OAYErB,EAOEqB,EAPFrB,MACAC,EAMEoB,EANFpB,OACAE,EAKEkB,EALFlB,gBACAC,EAIEiB,EAJFjB,UACAC,EAGEgB,EAHFhB,KACAiB,EAEED,EAFFC,IACGC,IACDF,6EAEQ5B,IAAR6B,GACFE,QAAQC,KACN,qFAIGC,gBAAoB,SACzBJ,IAAKvB,EAA6BC,EAAOC,EAAQ,CAC/CE,gBAAAA,EACAC,UAAAA,EACAC,KAAAA,IAEFsB,IAAK,eACFJ,8BCrDyB,SAC9BF,OASQrB,EAAgDqB,EAAhDrB,MAAOC,EAAyCoB,EAAzCpB,OAAQe,EAAiCK,EAAjCL,UAAWM,EAAsBD,EAAtBC,IAAQC,IAAcF,6CAE5C5B,IAAR6B,GACFE,QAAQC,KACN,0FAIkBC,gBAAmCjC,GAAlDa,OAAKsB,cAIZF,kBAAsB,WACpBE,EACEb,EAA4Bf,EAAOC,EAAQ,CACzCe,UAAAA,MAGH,CAAChB,EAAOC,EAAQe,IAEZU,gBAAoB,SACzBJ,IAAKhB,EACLqB,IAAK,eACFJ"}